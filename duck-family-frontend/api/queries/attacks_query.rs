pub struct AttacksQuery ; pub mod attacks_query { # ! [ allow ( dead_code ) ] pub const OPERATION_NAME : & 'static str = "AttacksQuery" ; pub const QUERY : & 'static str = "query AttacksQuery {\n  attacks {\n    id\n    units {\n      id\n      hp\n      sprite\n      speed\n    }\n  }\n}" ; use serde :: { Serialize , Deserialize } ; # [ allow ( dead_code ) ] type Boolean = bool ; # [ allow ( dead_code ) ] type Float = f64 ; # [ allow ( dead_code ) ] type Int = i64 ; # [ allow ( dead_code ) ] type ID = String ; # [ derive ( Deserialize ) ] pub struct AttacksQueryAttacksUnits { pub id : ID , pub hp : Int , pub sprite : String , pub speed : Float , } # [ derive ( Deserialize ) ] pub struct AttacksQueryAttacks { pub id : ID , pub units : Vec < AttacksQueryAttacksUnits > , } # [ derive ( Serialize ) ] pub struct Variables ; # [ derive ( Deserialize ) ] pub struct ResponseData { # [ doc = "WIP for testing" ] pub attacks : Vec < AttacksQueryAttacks > , } } impl graphql_client :: GraphQLQuery for AttacksQuery { type Variables = attacks_query :: Variables ; type ResponseData = attacks_query :: ResponseData ; fn build_query ( variables : Self :: Variables ) -> :: graphql_client :: QueryBody < Self :: Variables > { graphql_client :: QueryBody { variables , query : attacks_query :: QUERY , operation_name : attacks_query :: OPERATION_NAME , } } }